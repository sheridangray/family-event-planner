// Live test of FunCheapSF scraper to see actual events found
const FunCheapSFScraper = require('./src/scrapers/funcheapsf');

// Mock logger with more detailed output
const mockLogger = {
  info: (msg) => console.log(`üìù [INFO] ${msg}`),
  debug: (msg) => console.log(`üîç [DEBUG] ${msg}`),
  warn: (msg) => console.log(`‚ö†Ô∏è  [WARN] ${msg}`),
  error: (msg, err) => console.log(`‚ùå [ERROR] ${msg}`, err || '')
};

async function testLiveScraping() {
  console.log('üöÄ Testing FunCheapSF scraper with live data...\n');
  
  try {
    const scraper = new FunCheapSFScraper(mockLogger);
    console.log(`Scraper: ${scraper.name}`);
    console.log(`Target URL: ${scraper.url}\n`);
    
    console.log('üîÑ Starting scrape operation...');
    const events = await scraper.scrape();
    
    console.log(`\nüìä SCRAPING RESULTS:`);
    console.log(`Total events found: ${events.length}`);
    
    if (events.length > 0) {
      console.log('\nüéâ FAMILY EVENTS DISCOVERED:');
      console.log('=' .repeat(60));
      
      events.forEach((event, index) => {
        console.log(`\n${index + 1}. ${event.title}`);
        console.log(`   üìÖ Date: ${event.date}`);
        console.log(`   üìç Location: ${event.location.address}`);
        console.log(`   üí∞ Cost: ${event.cost === 0 ? 'FREE' : '$' + event.cost}`);
        console.log(`   üéØ Age Range: ${event.ageRange.min}-${event.ageRange.max} years`);
        if (event.description) {
          const shortDesc = event.description.length > 100 
            ? event.description.substring(0, 100) + '...' 
            : event.description;
          console.log(`   üìù Description: ${shortDesc}`);
        }
        if (event.registrationUrl) {
          console.log(`   üîó Registration: ${event.registrationUrl}`);
        }
        console.log(`   üÜî Event ID: ${event.id}`);
      });
      
      // Summary statistics
      console.log('\nüìà SUMMARY STATISTICS:');
      console.log('=' .repeat(40));
      const freeEvents = events.filter(e => e.cost === 0).length;
      const paidEvents = events.length - freeEvents;
      const apolloAppropriate = events.filter(e => e.ageRange.min <= 4 && e.ageRange.max >= 4).length;
      const athenaAppropriate = events.filter(e => e.ageRange.min <= 2 && e.ageRange.max >= 2).length;
      
      console.log(`Free events: ${freeEvents}`);
      console.log(`Paid events: ${paidEvents}`);
      console.log(`Appropriate for Apollo (4): ${apolloAppropriate}`);
      console.log(`Appropriate for Athena (2): ${athenaAppropriate}`);
      
    } else {
      console.log('\n‚ùå No family events found.');
      console.log('This could mean:');
      console.log('‚Ä¢ The website structure has changed');
      console.log('‚Ä¢ No family events are currently listed');
      console.log('‚Ä¢ The site is blocking automated access');
      console.log('‚Ä¢ Network connectivity issues');
    }
    
    // Clean up
    await scraper.closeBrowser();
    console.log('\n‚úÖ Scraping test completed!');
    
  } catch (error) {
    console.error('\nüí• Scraping test failed:', error.message);
    console.error('Stack trace:', error.stack);
  }
}

// Run the test
testLiveScraping().catch(console.error);